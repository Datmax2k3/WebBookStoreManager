#pragma checksum "D:\Workspace\N4_HK2\WebBookStoreManage\Views\Home\Product.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "164cd97ba4a820646546409280b7152de1a36264"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Product), @"mvc.1.0.view", @"/Views/Home/Product.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Workspace\N4_HK2\WebBookStoreManage\Views\_ViewImports.cshtml"
using WebBookStoreManage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Workspace\N4_HK2\WebBookStoreManage\Views\_ViewImports.cshtml"
using WebBookStoreManage.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"164cd97ba4a820646546409280b7152de1a36264", @"/Views/Home/Product.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"64d8f35278a37e92fb38f314442aaace3ec2b173", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Product : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<WebBookStoreManage.ViewModels.ProductViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!-- Views/Home/Product.cshtml -->\r\n");
#nullable restore
#line 2 "D:\Workspace\N4_HK2\WebBookStoreManage\Views\Home\Product.cshtml"
  
    ViewData["Title"] = "Sản Phẩm";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral(@"
<section id=""popular-books"" class=""bookshelf py-5 my-5"" style=""margin-top:0 !important; padding-top:0 !important;"">
    <div class=""container p-5"">
        <div class=""row"" style=""background-color:#ffffff; "">
            <div class=""col-md-3"" style=""padding: 0; background-color: #f3f2ed; "">
                ");
#nullable restore
#line 13 "D:\Workspace\N4_HK2\WebBookStoreManage\Views\Home\Product.cshtml"
           Write(await Html.PartialAsync("Navbar/_ProductFilter", Model));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            </div>\r\n            <div class=\"col-md-9\">\r\n                <!-- Gọi partial view _NavCategories -->\r\n                ");
#nullable restore
#line 17 "D:\Workspace\N4_HK2\WebBookStoreManage\Views\Home\Product.cshtml"
           Write(await Html.PartialAsync("Navbar/_NavCategories", Model.DanhMucs));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n                <!-- Container cho sản phẩm -->\r\n                <div id=\"productContainer\">\r\n                    ");
#nullable restore
#line 21 "D:\Workspace\N4_HK2\WebBookStoreManage\Views\Home\Product.cshtml"
               Write(await Html.PartialAsync("_ProductList", Model));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                </div>
            </div>
        </div>
    </div>
</section>
<script>
    document.addEventListener(""DOMContentLoaded"", function () {
        // Cache các phần tử DOM chung
        const filterForm = document.getElementById('filterForm');
        const loader = document.getElementById('loader');
        const productContainer = document.getElementById('productContainer');
        const navTabs = document.querySelectorAll('.tabs li a');
        const sortSelect = document.getElementById('sortSelect');
        const searchForm = document.getElementById('searchForm');
        const searchInput = document.getElementById('searchInput');

        // Xử lý sự kiện thay đổi cho checkbox của DANHMUC để hiển thị/ẩn sub-category và không tự động tick checkbox con trong giao diện
        const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
        categoryCheckboxes.forEach(function (checkbox) {
            const categoryId = checkbox.getAttribute('data-catego");
            WriteLiteral(@"ry-id');
            const subCategoryDiv = document.querySelector('[data-parent-category=""' + categoryId + '""]');
            // Kiểm tra trạng thái ban đầu
            if (checkbox.checked && subCategoryDiv) {
                subCategoryDiv.style.display = 'block';
            }
            checkbox.addEventListener('change', function () {
                const catId = this.getAttribute('data-category-id');
                const subDiv = document.querySelector('[data-parent-category=""' + catId + '""]');
                if (this.checked) {
                    if (subDiv) subDiv.style.display = 'block';
                } else {
                    if (subDiv) {
                        subDiv.style.display = 'none';
                        // Bỏ tick tất cả checkbox con trong sub-category
                        subDiv.querySelectorAll('input[type=""checkbox""]').forEach(cb => cb.checked = false);
                    }
                }
            });
        });

        // Hàm chung để gửi");
            WriteLiteral(@" AJAX với các tham số filter, sắp xếp và tìm kiếm
        function applyFilterAndSort() {
            // Thu thập các giá trị checkbox từ form filter
            const selectedCategories = Array.from(document.querySelectorAll('input[name=""danhmuc""]:checked'))
                .map(cb => cb.value);

            // Lấy các checkbox DANHMUCCHITIET đã tick (ban đầu)
            let selectedSubCategories = Array.from(document.querySelectorAll('input[name=""danhmucchitiet""]:checked'))
                .map(cb => cb.value);

            // Với mỗi checkbox DANHMUC được tick, nếu không có checkbox con nào tick, thì lấy tất cả các giá trị con của danh mục đó
            document.querySelectorAll('input[name=""danhmuc""]:checked').forEach(function (parentCheckbox) {
                const catId = parentCheckbox.getAttribute('data-category-id');
                const subDiv = document.querySelector('[data-parent-category=""' + catId + '""]');
                if (subDiv) {
                    const childCheckboxes");
            WriteLiteral(@" = Array.from(subDiv.querySelectorAll('input[name=""danhmucchitiet""]'));
                    const isAnyChildTicked = childCheckboxes.some(cb => cb.checked);
                    if (!isAnyChildTicked) {
                        // Nếu chưa có checkbox con nào tick, thêm tất cả giá trị của các checkbox con vào mảng
                        childCheckboxes.forEach(cb => {
                            if (!selectedSubCategories.includes(cb.value)) {
                                selectedSubCategories.push(cb.value);
                            }
                        });
                    }
                }
            });

            // Lấy giá trị sắp xếp và tìm kiếm từ dropdown và ô nhập liệu
            const sortValue = sortSelect ? sortSelect.value : """";
            const keyword = searchInput ? searchInput.value : """";

            // Tạo URL query string
            const params = new URLSearchParams();
            if (selectedCategories.length) {
                params.append('dan");
            WriteLiteral(@"hmuc', selectedCategories.join(','));
            }
            if (selectedSubCategories.length) {
                params.append('danhmucchitiet', selectedSubCategories.join(','));
            }
            if (sortValue) {
                params.append('sort', sortValue);
            }
            if (keyword) {
                params.append('keyword', keyword);
            }
            // Reset trang về 1 khi filter mới
            params.append('page', 1);

            const url = '/Home/FilterProducts?' + params.toString();
            if (loader) loader.style.display = 'grid';

            fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(response => response.text())
                .then(html => {
                    if (loader) loader.style.display = 'none';
                    if (productContainer) productContainer.innerHTML = html;

                    // Cập nhật active class cho navcategories dựa trên selectedCategories
               ");
            WriteLiteral(@"     document.querySelectorAll('.tabs li').forEach(li => {
                        const tabCatId = li.getAttribute('data-category-id');
                        if (selectedCategories.includes(tabCatId)) {
                            li.classList.add('active');
                        } else {
                            li.classList.remove('active');
                        }
                    });
                })
                .catch(error => {
                    console.error('Lỗi khi tải sản phẩm:', error);
                    if (loader) loader.style.display = 'none';
                });
        }

        // Xử lý submit của form filter
        if (filterForm) {
            filterForm.addEventListener('submit', function (e) {
                e.preventDefault();
                // Reset dropdown sắp xếp và ô tìm kiếm
                if (sortSelect) sortSelect.value = """";
                if (searchInput) searchInput.value = """";
                applyFilterAndSort();
          ");
            WriteLiteral(@"  });
        }

        // Xử lý submit của form tìm kiếm
        if (searchForm) {
            searchForm.addEventListener('submit', function (e) {
                e.preventDefault();
                applyFilterAndSort();
            });
        }

        // Xử lý sự kiện thay đổi cho dropdown sắp xếp
        if (sortSelect) {
            sortSelect.addEventListener('change', function () {
                applyFilterAndSort();
            });
        }

        // Xử lý submit của form tìm kiếm
        if (searchForm) {
            searchForm.addEventListener('submit', function (e) {
                e.preventDefault();
                applyFilterAndSort();
            });
        }

        // Xử lý click trên các tab navcategories
        navTabs.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const url = this.getAttribute('href');
                const catId = this.parentElement.getAttribute('data-cat");
            WriteLiteral(@"egory-id');

                // Cập nhật active class cho navcategories
                document.querySelectorAll('.tabs li').forEach(li => li.classList.remove('active'));
                this.parentElement.classList.add('active');

                // Reset filter: bỏ tick tất cả checkbox và ẩn sub-category
                document.querySelectorAll('#filterForm input[type=""checkbox""]').forEach(cb => {
                    cb.checked = false;
                });
                document.querySelectorAll('.sub-category').forEach(sub => sub.style.display = 'none');

                // Reset dropdown sắp xếp và ô tìm kiếm
                if (sortSelect) sortSelect.value = """";
                if (searchInput) searchInput.value = """";

                // Tick checkbox filter tương ứng với tab được chọn (nếu cần)
                const filterCheckbox = document.querySelector(`#filterForm input[data-category-id=""${catId}""]`);
                if (filterCheckbox) {
                    filterCheckbox.che");
            WriteLiteral(@"cked = true;
                    const subDiv = document.querySelector('[data-parent-category=""' + catId + '""]');
                    if (subDiv) {
                        subDiv.style.display = 'block';
                        // Nếu người dùng không tick riêng các mục con, khi submit hàm applyFilterAndSort() sẽ lấy toàn bộ giá trị con
                    }
                }

                fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                    .then(response => response.text())
                    .then(html => {
                        if (productContainer) productContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error loading products:', error));
            });
        });
    });
</script>

");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<WebBookStoreManage.ViewModels.ProductViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
